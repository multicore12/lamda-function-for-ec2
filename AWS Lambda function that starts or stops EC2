import boto3
import json
import logging

logger = logging.getLogger()
logger.setLevel(logging.INFO)

def send_sns_notification(subject, message):
    sns = boto3.client('sns')
    topic_arn = 'your_sns_topic_arn'  # Replace with your SNS topic ARN

    sns.publish(
        TopicArn=topic_arn,
        Subject=subject,
        Message=message
    )

def lambda_handler(event, context):
    if not isinstance(event, list):
        event = [event]

    for single_event in event:
        try:
            process_single_event(single_event)
        except Exception as e:
            error_message = f"Error processing event: {single_event}. Error: {str(e)}"
            logger.error(error_message)
            send_sns_notification("Lambda Error", error_message)

def process_single_event(single_event):
    instance_id = single_event.get('instance_id')
    region = single_event.get('region')
    action = single_event.get('action')

    if not instance_id or not region or not action:
        logger.error("Instance ID, region, or action is not provided. Skipping.")
        return

    ec2 = boto3.client('ec2', region_name=region)

    if action == 'start':
        logger.info("Starting EC2 Instance now.")
        try:
            response = ec2.start_instances(InstanceIds=[instance_id])
            logger.info("Start response: %s", response)
        except Exception as e:
            error_message = f"Error starting instance: {str(e)}"
            logger.error(error_message)
            send_sns_notification("Lambda Error", error_message)
    elif action == 'stop':
        logger.info("Stopping EC2 Instance now.")
        try:
            response = ec2.stop_instances(InstanceIds=[instance_id])
            logger.info("Stop response: %s", response)
        except Exception as e:
            error_message = f"Error stopping instance: {str(e)}"
            logger.error(error_message)
            send_sns_notification("Lambda Error", error_message)
    else:
        logger.warning("Unsupported action. Skipping.")




